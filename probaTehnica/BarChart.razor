@code {
    [Parameter]
    public List<BarChartData> Data { get; set; } = new();

    private double MaxValue => Data.Count > 0 ? Data.Max(d => d.Value) : 1; 

    private double CalculateHeight(double value)
    {
        if (MaxValue == 0) return 0; 
        return (value / MaxValue) * 90; 
    }
}

<div class="bar-chart">
    @foreach (var item in Data)
    {
        var heightPercentage = CalculateHeight(item.Value); 
        <div class="bar-container">
            <div class="bar" style="height:@heightPercentage%">
                <span>@item.Value 
                    @if(item.Percentage != null)
                    {
                        <span>(@item.Percentage%)</span>
                    }
                    </span> 
            </div>
            <div class="label">@item.Label</div>
        </div>
    }
</div>

<style>
    .bar-chart {
        display: flex;
        align-items: flex-end;
        height: 300px; 
        width: fit-content;
        background: linear-gradient(200deg, #010724, #03125c); 
        border: 2px solid #7e7e7e; 
        padding: 10px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.5); 
    }

    .bar-container {
        display: flex;
        flex-direction: column-reverse;
        align-items: center;
        width: 80px;
        margin-right: 10px;
        height: 100%;
    }

    .bar {
        width: 100%;
        background: linear-gradient(230deg,#fab74b,#ff7300);
        text-align: center;
        color: white;
        font-size: 12px;
        display: flex;
        justify-content: center;
        align-items: flex-end;
        transition: height 0.5s ease;
        min-height:2px;
    }
    .bar span{

            margin-bottom: 5px; 
            visibility: hidden; 
    }
    .bar:hover span{
        visibility: visible;
    }
    .label {
        margin-top: 5px;
        font-size: 14px;
        color:white;
        margin-bottom:25px;
        max-height:15px;
    }
</style>

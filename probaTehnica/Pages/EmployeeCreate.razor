@page "/AddEmployee"
@inject IEmployeeData employeeData
@inject IDepartmentData departmentData
@inject NavigationManager navigation
@inject SessionService sessionService
@if (sessionService==null)
{
    <em>Loading....</em>
}
else
{
    <h3>EmployeeCreate</h3>

    <div>
        <table>

            <tbody>
                <tr>
                    <td>FirstName:</td>
                    <td>
                        <input type="text" @bind="FirstName" placeholder="FirstName" required />
                    </td>
                </tr>

                <tr>
                    <td>LastName:</td>
                    <td>
                        <input type="text" @bind="LastName" placeholder="LastName" required />
                    </td>
                </tr>

                <tr>
                    <td>Department:</td>
                    <td>
                        <select id="selectDepartment" @bind="SelectedDepartment" required>
                            <option value="">Select a Department</option>

                            @if (departments != null)
                            {
                                @foreach (var department in departments)
                                {
                                    <option value="@department.DepartmentName">@department.DepartmentName</option>
                                }

                            }

                        </select>
                    </td>
                </tr>

                <tr>
                    <td>Salary:</td>
                    <td>
                        <input type="number" @bind="Salary" required min="1" />
                    </td>
                </tr>
            </tbody>
        </table>

    </div>

    <div>
        <button @onclick="AddInsert">Add</button>  <button @onclick="Cancel">Cancel</button>
        @if (String.IsNullOrEmpty(errorMessage) == false)
        {
            <div style="color:red;">@errorMessage</div>
        }
    </div>
}


@code {
    private List<DepartmentModel> departments;

    private string FirstName { get; set; }
    public string LastName { get; set; }
    //public string Department { get; set; }
    public int Salary { get; set; }
    private string SelectedDepartment { get; set; }
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        departments = await departmentData.Departments();
    }
    protected override async Task OnAfterRenderAsync(bool rendered)
    {
        if (rendered)
        {
            var currentUser = await sessionService.GetCurrentUser();
            if (currentUser == null)
            {
                navigation.NavigateTo("/Login");
                return;
            }

            if (await sessionService.GetUserRole() == false)
            {
                navigation.NavigateTo("/");
                return;
            }
            StateHasChanged();
        }
    }
    private async Task AddInsert()
    {
        CheckForErrors();
        if (String.IsNullOrWhiteSpace(errorMessage) == false)
        {
            return;
        }

        var newInsert = new EmployeeModel
            {
                FirstName = FirstName,
                LastName = LastName,
                Department = SelectedDepartment,
                Salary = Salary,
            };
        await employeeData.AddEmployee(newInsert);
        navigation.NavigateTo("/Employees");

    }
    private void CheckForErrors()
    {
        if (String.IsNullOrWhiteSpace(FirstName) == true)
        {
            errorMessage = "Please enter a first name";
        }
        else if (String.IsNullOrWhiteSpace(LastName) == true)
        {
            errorMessage = "Please enter a last name";
        }
        else if (String.IsNullOrWhiteSpace(SelectedDepartment) == true)
        {
            errorMessage = "Please enter a department";
        }
        else if (Salary <= 0)
        {
            errorMessage = "Please enter a salary";
        }
        else
        {
            errorMessage = "";
        }
    }
    private void Cancel()
    {
        navigation.NavigateTo("/Employees");
    }

}

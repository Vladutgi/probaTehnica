@page "/AddUser"
@inject IUserData userData
@inject ISessionService sessionService


    
<div class="container">
    <div class="createBox">
        <h3 class="pageText">UserCreate</h3>
        <table>

            <tbody>
                <tr>
                    <td>FirstName:</td>
                    <td>
                        <input type="text" @bind="FirstName" placeholder="FirstName" required />
                    </td>
                </tr>

                <tr>
                    <td>LastName:</td>
                    <td>
                        <input type="text" @bind="LastName" placeholder="LastName" required />
                    </td>
                </tr>

                <tr>
                    <td>Email:</td>
                    <td>
                        <input type="text" @bind="Email" placeholder="Email" required />

                    </td>
                </tr>
                <tr>
                    <td>Password:</td>
                    <td>
                        <input type="password" @bind="EncryptedPassword" placeholder="Password" required />

                    </td>
                </tr>
                <tr>
                    <td>SecretQuestion:</td>
                    <td>
                        <input type="text" @bind="SecretQuestion" placeholder="SecretQuestion" required />

                    </td>
                </tr>
                <tr>
                    <td>QuestionAnswer:</td>
                    <td>
                        <input type="password" @bind="EncryptedQuestionAnswer" placeholder="QuestionAnswer" required />

                    </td>
                </tr>



            </tbody>
        </table>
        <div class="buttons">
            <button @onclick="AddInsert">Add</button>  <button @onclick="Cancel">Cancel</button>
            @if (String.IsNullOrEmpty(errorMessage) == false)
            {
                <div style="color:red;">@errorMessage</div>
            }
        </div>
    </div>
</div>


@code {
    private string errorMessage="";
    private string FirstName;
    private string LastName;
    private string Email;
    private string EncryptedPassword;
    private string SecretQuestion;
    private string EncryptedQuestionAnswer;
    private bool IsLoading = false;
    private string user = null;

    protected override async Task OnAfterRenderAsync(bool rendered)
    {
        if (rendered)
        {
            user = await sessionService.GetCurrentUser();
            if (string.IsNullOrEmpty(user) == false)
            {
                sessionService.NavigateTo("/");
            }
            StateHasChanged();
        }
    }
    private async Task AddInsert()
    {
        if (IsLoading == true)
        {
            return;
        }
        IsLoading = true;
        CheckForErrors();
        if (String.IsNullOrWhiteSpace(errorMessage) == false)
        {
            return;
        }
        try
        {

            var newInsert = new UserModel
            {
                FirstName = FirstName,
                LastName = LastName,
                Email = Email.ToLower(),
                EncryptedPassword = EncryptedPassword,
                SecretQuestion = SecretQuestion,
                EncryptedQuestionAnswer = EncryptedQuestionAnswer,
                Role = "",
                Created = DateTime.UtcNow,
                LastModified = DateTime.UtcNow

            };
            await userData.AddUser(newInsert);
            sessionService.NavigateTo("/");
            IsLoading = false;

        }
        catch (Exception)
        {
            errorMessage = "This email is already used";
        }

    }
    private void CheckForErrors()
    {
        if (String.IsNullOrWhiteSpace(FirstName) == true)
        {
            errorMessage = "Please enter a first name";
        }
        else if (String.IsNullOrWhiteSpace(LastName) == true)
        {
            errorMessage = "Please enter a last name";
        }
        else if(String.IsNullOrWhiteSpace(Email) == true)
        {
            errorMessage = "Please enter your email";
        }
        else if (Email.Contains("@")==false||Email.Contains(".") == false||Email.Length<=5)
        {
            errorMessage = "Please enter a valid email";
        }

        else if (String.IsNullOrWhiteSpace(EncryptedPassword) == true)
        {
            errorMessage = "Please enter your password";
        }
        else if (String.IsNullOrWhiteSpace(SecretQuestion) == true)
        {
            errorMessage = "Please enter your secret question";
        }
        else if (String.IsNullOrWhiteSpace(EncryptedQuestionAnswer) == true)
        {
            errorMessage = "Please enter your secret question answer";
        }

        else
        {
            errorMessage = "";
        }
    }
    private void Cancel()
    {
        sessionService.NavigateTo("/Login");
    }
}












<style>

    
    .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 90vh;
        text-align: center;
        margin: auto;
        width: 100vw;
    }

    .createBox {
        width: fit-content;
        height: fit-content;
        background-color: orange;

        padding: 30px;
        border-radius: 10px;
        text-align: left;
    }

    .pageText {
        text-align: center;
    }


    .buttons {
        display: flex;
        justify-content: center;
        padding-top: 30px;
    }
</style>
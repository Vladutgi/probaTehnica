@page "/ForgotPassword"
@inject IUserData userData
@inject ISessionService sessionService

<div class="container">
    <div class="createBox">
        <h3 class="pageText">ResetPassword</h3>
        <table>

            <tbody>
                

                <tr>
                    <td>Email:</td>
                    <td>
                        <input type="text" @bind="Email" placeholder="Email" required />

                    </td>
                </tr>
                <tr>
                    <td>Password:</td>
                    <td>
                        <input type="password" @bind="Password" placeholder="Password" required  />

                    </td>
                </tr>
                <tr>
                    <td>Confirm Password:</td>
                    <td>
                        <input type="password" @bind="ConfirmPassword" placeholder="Confirm Password" required />

                    </td>
                </tr>
                <tr>
                    <td>QuestionAnswer:</td>
                    <td>
                        <input type="password" @bind="QuestionAnswer" placeholder="QuestionAnswer" required />

                    </td>
                </tr>
              
            </tbody>
        </table>
        <div class="buttons">
            <button @onclick="UpdateAccount">Save</button>  <button @onclick="Cancel">Cancel</button>
            @if (String.IsNullOrEmpty(errorMessage) == false)
            {
                <div style="color:red;">@errorMessage</div>
            }
        </div>
    </div>
</div>

@code {
    private string errorMessage="";
    private string Email;
    private string Password;
    private string ConfirmPassword;
    private string QuestionAnswer;
    private bool IsLoading = false;
    private string user = null;

    protected override async Task OnAfterRenderAsync(bool rendered)
    {
        if (rendered)
        {
            user = await sessionService.GetCurrentUser();
            if (string.IsNullOrEmpty(user) == false)
            {
                sessionService.NavigateTo("/");
            }
            StateHasChanged();
        }
    }
    private async Task UpdateAccount()
    {
        if (IsLoading == true)
        {
            return;
        }
        IsLoading = true;
        CheckForErrors();
        if (String.IsNullOrWhiteSpace(errorMessage) == false)
        {
            return;
        }

        try
        {
            var result = await userData.FindUser(Email, QuestionAnswer);
            if(result != null)
            {
                result.EncryptedPassword = Password;
                result.LastModified = DateTime.UtcNow;
                await userData.UpdateUser(result);
                sessionService.NavigateTo("/");

            }
            else
            {
                errorMessage = "Incorrect details";
            }

        }
        catch (Exception)
        {
            errorMessage = "Something went wrong";
        }
        IsLoading = false;



    }
    private void CheckForErrors()
    {
        if (String.IsNullOrWhiteSpace(Email) == true)
        {
            errorMessage = "Please enter your email";
        }
        else if(String.IsNullOrWhiteSpace(Password) == true)
        {
            errorMessage = "Please enter your password";
        }
        else if(String.IsNullOrWhiteSpace(QuestionAnswer) == true)
        {
            errorMessage = "Please enter your question answer";
        }
        else if (Password != ConfirmPassword)
        {
            errorMessage = "Passwords do not match";    
        }

        else
        {
            errorMessage = "";
        }
    }
    private void Cancel()
    {
        sessionService.NavigateTo("/Login");
    }
}












<style>


    .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 90vh;
        text-align: center;
        margin: auto;
        width: 100vw;
    }

    .createBox {
        width: fit-content;
        height: fit-content;
        background-color: orange;

        padding: 30px;
        border-radius: 10px;
        text-align: left;
    }

    .pageText {
        text-align: center;
    }


    .buttons {
        display: flex;
        justify-content: center;
        padding-top: 30px;
    }
</style>
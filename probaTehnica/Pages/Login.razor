@page "/Login"
@inject ISessionService sessionService
@inject IUserData userData
<div class="container">
    <div class="createBox">
        <h3 class="pageText">Login</h3>

        <table>

            <tbody>

                <tr>
                    <td>Email:</td>
                    <td>
                        <input type="text" @bind="Email" placeholder="Email" required />

                    </td>
                </tr>
                <tr>
                    <td>Password:</td>
                    <td>
                        <input type="password" @bind="Password" placeholder="Password" required />

                    </td>
                </tr>
                <tr>
                    <td>Remember me:</td>
                    <td>
                        <input type="checkbox" @bind="RememberMe" />
                    </td>
                </tr>



            </tbody>
        </table>
        <div class="hrefContainer">
            <table class="hrefBody">
                <tbody>
                    <tr>
                        <td class="addUserCell">
                            <a href="/AddUser">Create new user</a>
                        </td>
                        <td class="forgotPasswordCell">
                            <a href="/ForgotPassword">Forgot password</a>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="buttons">
            <button class="loginButton" @onclick="Connect">Connect</button> 
            
                <div class="errMessage" style="color:red;">@errorMessage</div>
            
        </div>
    </div>
</div>

@code {
    private string errorMessage="";

    private string Email;
    private string Password;
    private bool IsLoading = false;
    private bool RememberMe { get; set; }



    protected override async Task OnAfterRenderAsync(bool rendered)
    {
        if (rendered)
        {
            var currentUser = await sessionService.GetCurrentUser();
            if (currentUser != null)
            {
                sessionService.NavigateTo("/");
                return;
            }
            var savedEmail = await sessionService.GetSavedEmail();
            if (string.IsNullOrEmpty(savedEmail) == false)
            {
                Email = savedEmail;
                RememberMe = true;
            }

            StateHasChanged();
        }
    }

    public async Task Connect()
    {
        if (IsLoading == true)
        {
            return;
        }
        IsLoading = true;
        CheckForErrors();
        if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            IsLoading = false; 
            return;
        }

        if (await userData.CheckDetails(Email, Password) == true)
        {
            var userRole = await userData.IsAdministrator(Email);
            await sessionService.SetCurrentUser(Email, userRole);
            if (RememberMe == true)
            {
                await sessionService.SetSavedEmail(Email);
            }
            else
            {
                await sessionService.ClearSavedEmail();
            }
            sessionService.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid email or password";
        }
        IsLoading = false;

    }
    private void CheckForErrors()
    {
        if (String.IsNullOrWhiteSpace(Email) == true)
        {
            errorMessage = "Please enter your email";
        }
        else if (String.IsNullOrWhiteSpace(Password) == true)
        {
            errorMessage = "Please enter your password";
        }

        else
        {
            errorMessage = "";
        }
    }

}












<style>


    .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 90vh;
        text-align: center;
        margin: auto;
        width: 100vw;
    }

    .createBox {
        width: fit-content;
        height: fit-content;
        background-color: orange;
        padding: 30px;
        border-radius: 10px;
        text-align: left;
    }

    .pageText {
        text-align: center;
    }

    .buttons {
        display: flex;
        justify-content: center;
        padding-top: 30px;
    }

    .hrefContainer {
        width: 100%;
    }

    .hrefBody {
        width: 100%;
    }

    .addUserCell {
        text-align: left;
    }

    .forgotPasswordCell {
        text-align: right;
    }

</style>
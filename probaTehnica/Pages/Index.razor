@page "/"
@inject IDepartmentData departmentData
@inject IEmployeeData employeeData
@inject NavigationManager navigation
@inject SessionService sessionService
<PageTitle>Index</PageTitle>
@if (String.IsNullOrEmpty(user) == true)
{
    <em>Loading....</em>
}
else
{

    @if (employees != null)
    {
        @if (employees.Count > 1)
        {

            <table style="width:100%;">
                <tbody>
                    <tr>
                        <td style="width:50%; text-align:center;">Employee salaries</td>
                        <td style="width:50%; display:flex; justify-content:center; align-items:flex-end;">
                            <BarChart Data="EmployeeSalary" />
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2"><hr /></td>
                    </tr>
                    <tr>
                        <td style="width:50%; text-align:center;">Employees per department</td>
                        <td style="width:50%; display:flex; justify-content:center; align-items:flex-end;">
                            <BarChart Data="EmployeesPerDepartment" />
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2"><hr /></td>
                    </tr>
                    <tr>
                        <td style="width:50%; text-align:center;">The average Salary per department</td>
                        <td style="width:50%; display:flex; justify-content:center; align-items:flex-end;">
                            <BarChart Data="AverageSalary" />
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2"><hr /></td>
                    </tr>
                    <tr>
                        <td style="width:50%; text-align:center;">The minimum and maximum salaries</td>
                        <td style="width:50%; display:flex; justify-content:center; align-items:flex-end;">
                            <BarChart Data="MinMaxSalary" />
                        </td>
                    </tr>
                </tbody>
            </table>




        }
    }
}



@code {
    private List<EmployeeModel> employees;

    private List<BarChartData> AverageSalary = new List<BarChartData>();
    private List<BarChartData> MinMaxSalary = new List<BarChartData>();
    private List<BarChartData> EmployeesPerDepartment = new List<BarChartData>();
    private List<BarChartData> EmployeeSalary = new List<BarChartData>();
    private string user;
    protected override async Task OnInitializedAsync()
    {
        employees = await employeeData.Employees();
        CalculateAverageSalary();
        ShowMinMaxSalaries();
        ShowEmployeesPerDepartment();
        EmployeeSalaries();
    }
    protected override async Task OnAfterRenderAsync(bool rendered)
    {
        if (rendered)
        {
            user = await sessionService.GetCurrentUser();
            if (string.IsNullOrEmpty(user) == true)
            {
                await sessionService.Logout();
                //navigation.NavigateTo("/Login");
            }
            StateHasChanged();
        }
    }
    private void CalculateAverageSalary()
    {
        var results = employees.GroupBy(e => e.Department);
        foreach (var dept in results)
        {
            double avgSalary = dept.Average(e => e.Salary);
            avgSalary = Math.Round(avgSalary, 2);
            AverageSalary.Add(new BarChartData { Label = dept.Key, Value = avgSalary });
        }


    }

    private void EmployeeSalaries()
    {
        // var results = employees.GroupBy(e => e.Department);
        // foreach(var dept in results)
        // {
        //     double avgSalary = dept.Average(e => e.Salary);

        //     chartData.Add(new BarChartData { Label = dept.Key, Value = avgSalary });
        // }

        foreach (var emp in employees)
        {
            EmployeeSalary.Add(new BarChartData { Label = emp.FirstName, Value = emp.Salary });

        }
    }
    private void ShowMinMaxSalaries()
    {

        if (employees.Count > 1)
        {
            var minSalary = employees.OrderBy(e => e.Salary).FirstOrDefault();
            var maxSalary = employees.OrderByDescending(e => e.Salary).FirstOrDefault();
            double totalSalary = minSalary.Salary + maxSalary.Salary;
            var min = ((minSalary.Salary) / totalSalary) * 100;
            var max = ((maxSalary.Salary) / totalSalary) * 100;
            MinMaxSalary.Add(new BarChartData { Label = minSalary.FirstName + " " + minSalary.LastName, Value = minSalary.Salary, Percentage = min.ToString("0.0") });
            MinMaxSalary.Add(new BarChartData { Label = maxSalary.FirstName + " " + maxSalary.LastName, Value = maxSalary.Salary, Percentage = max.ToString("0.0") });

        }
    }
    private void ShowEmployeesPerDepartment()
    {
        var results = employees.GroupBy(e => e.Department);

        foreach (var dept in results)
        {
            EmployeesPerDepartment.Add(new BarChartData { Label = dept.Key, Value = dept.Count() });
        }
    }
    private void GoToViewEmployees()
    {
        navigation.NavigateTo($"/Employees");
    }
    private void GoToViewDepartments()
    {
        navigation.NavigateTo($"/Departments");
    }
    private void GoToViewAddUsers()
    {
        navigation.NavigateTo($"/AddUser");
    }

}

